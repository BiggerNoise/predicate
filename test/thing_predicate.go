// Generated by: setup
// TypeWriter: predicate
// Directive: +test on main.Thing

// Simple predicates with boolean combinations
// See http://clipperhouse.github.io/gen for documentation on gen
// Not() is syntacticly a bit ugly.  Ideally, you would say something
// like Not(other). Because there's no overloading, you have to settle
// for other.Not()

package main

// ThingPredicate is a function that accepts a Thing and returns a bool.  Use this type where you would use func(Thing) bool.
type ThingPredicate func(item Thing) bool

// And combines two predicates into a new predicate that is satisfied if both of the original predicates are satisfied
func (rcv ThingPredicate) And(other ThingPredicate) ThingPredicate {
	return func(item Thing) bool {
		return rcv(item) && other(item)
	}
}

// Or combines two predicates into a new predicate that is satisfied if either of the original predicates is satisfied
func (rcv ThingPredicate) Or(other ThingPredicate) ThingPredicate {
	return func(item Thing) bool {
		return rcv(item) || other(item)
	}
}

// Not inverts a predicate that is satisfied if the original predicates is not satisfied
func (rcv ThingPredicate) Not() ThingPredicate {
	return func(item Thing) bool {
		return !rcv(item)
	}
}
